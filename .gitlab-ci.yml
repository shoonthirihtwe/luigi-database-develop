.inc_prj: &inc_prj
  project: 'ichaininc/gitlab-ci-templates'
  ref: master

include:
  - <<: *inc_prj
    file: 'templates/production-deploy.yml'

image: ubuntu:latest
services:
  - docker:dind

stages:
  - notice
  - build
  - deploy

before_script:
  - apt-get update
  - apt-get install -y curl

variables:
  DEV_BRANCH_URL: https://gitlab.com/ichaininc/luigi2-database/-/tree/develop
  WEBHOOK_URL: https://hooks.slack.com/services/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
  DOCKER_DRIVER: overlay2

notify_migration:
  stage: notice
  script:
    - curl -X POST --data-urlencode "payload={\"text\":\"<!channel> マイグレーションファイルが更新されました\n$DEV_BRANCH_URL/Migration\"}" $WEBHOOK_URL
  tags:
    - luigi-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - Migration/**/*

notify_ddl:
  stage: notice
  script:
    - curl -X POST --data-urlencode "payload={\"text\":\"<!channel> DDLファイルが更新されました\n$DEV_BRANCH_URL/DDL\"}" $WEBHOOK_URL
  tags:
    - luigi-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - DDL/**/*

notify_service_instance:
  stage: notice
  script:
    - curl -X POST --data-urlencode "payload={\"text\":\"<!channel> Service Instance が更新されました\n$DEV_BRANCH_URL/Service_instance\"}" $WEBHOOK_URL
  tags:
    - luigi-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - Service_instance/**/*

notify_service_instance_base_data:
  stage: notice
  script:
    - curl -X POST --data-urlencode "payload={\"text\":\"<!channel> Service Instance base data が更新されました\n$DEV_BRANCH_URL/Service_instance_base_data\"}" $WEBHOOK_URL
  tags:
    - luigi-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - Service_instance_base_data/**/*

notify_seed:
  stage: notice
  script:
    - curl -X POST --data-urlencode "payload={\"text\":\"<!channel> Seed データが更新されました\n$DEV_BRANCH_URL/Seed\"}" $WEBHOOK_URL
  tags:
    - luigi-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - Seed/**/*

build:
  stage: build
  before_script:
    - apk add --no-cache curl jq python3 py3-pip git openssh-client
    - pip3 install awscli
  image: docker:latest
  variables:
    IMAGE_TAG: ${REPOSITORY_URI}:${CI_COMMIT_TAG}
    FLYWAY_VERSION: "7.11.4"
  script:
    - $(aws ecr get-login --no-include-email)
    - docker build -t ${IMAGE_TAG} -f build/Dockerfile --build-arg FLYWAY_VERSION=${FLYWAY_VERSION} .
    - docker push ${IMAGE_TAG}
  tags:
    - luigi-runner
  only:
    - /^v[0-9]+(?:.[0-9]+)+$/

infra-repo-push:
  stage: deploy
  image: alpine:latest
  variables:
    IMAGE_TAG: ${REPOSITORY_URI}:${CI_COMMIT_TAG}
    TARGET_BRANCH: develop
  before_script:
    - apk add --no-cache curl jq python3 py3-pip git openssh-client
    - pip3 install awscli
  script:
  # get gitlab ssh key
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - aws ssm get-parameter --name ${GITLAB_SSHKEY_PATH} --query Parameter.Value --with-decryption --output text > $HOME/.ssh/id_gitlab
    - chmod 600 $HOME/.ssh/id_gitlab
  # gitlab ssh connection init setting
    - |
      cat <<EOF > $HOME/.ssh/config
      Hostname gitlab.com
      IdentityFile ~/.ssh/id_gitlab
      EOF
    - ssh-keyscan -t rsa gitlab.com > $HOME/.ssh/known_hosts
  # git clone infra-repository
    - git clone -b ${TARGET_BRANCH} ${SSH_INFRA_GIT_REPO}
  # git initialize
    - git config --global user.email "${CI_CD_USER_MAILADDRESS}"
  # application container image tag overwrite
    - sed -i -e "s|$REPOSITORY_URI.*|$IMAGE_TAG|g" ${K8S_MANIFEST_DEV_DIR}/${K8S_TARGET_FILENAME}
  # create commit
    - cd ${K8S_MANIFEST_DEV_DIR}
    - git add -A
    - git commit --author="CI/CD pipeline(gitlab) <${CI_CD_USER_MAILADDRESS}>" -m "Deploying ${SERVICE_NAME} images, ver ${CI_COMMIT_TAG}."
  # push to target branch
    - git push origin ${TARGET_BRANCH}
  tags:
    - luigi-runner
  only:
    - /^v[0-9]+(?:.[0-9]+)+$/

production-deploy:
  variables:
  # overwrite includes
    MR_SECONDARY_ASSIGN: ""